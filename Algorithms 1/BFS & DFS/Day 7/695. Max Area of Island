def dfs(row, col, grid):
    if row >= 0 and col >= 0 and row < len(grid) and col < len(grid[0]) and grid[row][col] == 1:
        grid[row][col] = 0
        
        left = dfs(row - 1, col, grid)
        right = dfs(row + 1, col, grid)
        down = dfs(row, col - 1, grid)
        up = dfs(row, col + 1, grid)
        
        return left + right + down + up + 1
    return 0
        
        
        

class Solution(object):
    def maxAreaOfIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        maxArea = 0
        
        # shift row
        for i in range(len(grid)):
            # shift column
            for j in range(len(grid[0])):
                
                if grid[i][j] == 1: 
                    maxArea = max(dfs(i, j, grid), maxArea)
                    
        return maxArea
                
